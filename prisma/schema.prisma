//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AttributeTypes {
  String
  Number
  List
  Boolean
  Date
}

/// @@allow('create', true)
/// @@allow('all', auth() == this)
model User {
  id         String           @id() @default(cuid())
  name       String
  /// @email
  /// @length(6, 32)
  email      String           @unique()
  /// @password
  /// @omit
  password   String
  zipcode    Int?
  Games      Game[]
  CardCounts UserCardCounts[]
}

model Set {
  id           String    @id() @default(cuid())
  name         String
  code         String?
  release_date DateTime?
  Game         Game      @relation(fields: [gameId], references: [id])
  gameId       String
  Cards        Card[]
}

model Game {
  id           String      @id() @default(cuid())
  name         String      @unique()
  factionLabel String      @default("faction")
  specialLabel String      @default("foil")
  playSetCount Int
  Types        Type[]
  Factions     Faction[]
  Rarities     Rarity[]
  Attributes   Attribute[]
  Sets         Set[]
  Cards        Card[]
  Users        User[]
}

model Attribute {
  id       String           @id() @default(cuid())
  name     String
  type     AttributeTypes
  options  String[]
  required Boolean          @default(false)
  Game     Game             @relation(fields: [gameId], references: [id])
  gameId   String
  Cards    CardAttributes[]
}

model Type {
  id     String @id() @default(cuid())
  name   String
  Game   Game   @relation(fields: [gameId], references: [id])
  gameId String
  Cards  Card[]
}

model Faction {
  id      String  @id() @default(cuid())
  name    String
  color   String
  hexCode String?
  Game    Game    @relation(fields: [gameId], references: [id])
  gameId  String
  Cards   Card[]
}

model Rarity {
  id     String @id() @default(cuid())
  name   String
  Game   Game   @relation(fields: [gameId], references: [id])
  gameId String
  Cards  Card[]
}

model Card {
  id           String           @id() @default(cuid())
  number       Int
  name         String
  text         String?
  flavorText   String?
  imageUrl     String?
  illustrators String[]
  tcgPlayerId  String?
  Game         Game             @relation(fields: [gameId], references: [id])
  gameId       String
  Set          Set              @relation(fields: [setId], references: [id])
  setId        String
  Types        Type[]
  Attributes   CardAttributes[]
  Faction      Faction?         @relation(fields: [factionId], references: [id])
  factionId    String?
  Rarity       Rarity?          @relation(fields: [rarityId], references: [id])
  rarityId     String?
  Counts       UserCardCounts[]
}

model CardAttributes {
  valueString  String?
  valueNumber  Decimal?
  valueBoolean Boolean?
  valueDate    DateTime?
  valueList    String[]
  Attribute    Attribute @relation(fields: [attributeId], references: [id])
  attributeId  String
  Card         Card      @relation(fields: [cardId], references: [id])
  cardId       String

  @@id([cardId, attributeId])
}

model UserCardCounts {
  haveMain         Boolean @default(false)
  wantMain         Boolean @default(false)
  isMainSpecial    Boolean @default(false)
  haveCountNormal  Int     @default(0)
  wantCountNormal  Int     @default(0)
  haveCountSpecial Int     @default(0)
  wantCountSpecial Int     @default(0)
  Card             Card    @relation(fields: [cardId], references: [id])
  cardId           String
  User             User    @relation(fields: [userId], references: [id])
  userId           String

  @@id([cardId, userId])
}
